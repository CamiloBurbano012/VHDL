// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "06/08/2025 17:50:23"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    motores
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module motores_vlg_sample_tst(
	clk,
	mover,
	piso_actual,
	piso_destino,
	puerta_cmd,
	reset,
	sampler_tx
);
input  clk;
input  mover;
input [4:0] piso_actual;
input [4:0] piso_destino;
input  puerta_cmd;
input  reset;
output sampler_tx;

reg sample;
time current_time;
always @(clk or mover or piso_actual or piso_destino or puerta_cmd or reset)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
	if ($realtime == 0 || $realtime != current_time)  
	begin									          
		if (sample === 1'bx)                          
			sample = 0;                               
		else                                          
			sample = ~sample;                         
	end										          
	current_time = $realtime;					      
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module motores_vlg_check_tst (
	in1_motor,
	in2_motor,
	pwm_motor,
	pwm_puerta,
	sampler_rx
);
input  in1_motor;
input  in2_motor;
input  pwm_motor;
input  pwm_puerta;
input sampler_rx;

reg  in1_motor_expected;
reg  in2_motor_expected;
reg  pwm_motor_expected;
reg  pwm_puerta_expected;

reg  in1_motor_prev;
reg  in2_motor_prev;
reg  pwm_motor_prev;
reg  pwm_puerta_prev;

reg  in1_motor_expected_prev;
reg  in2_motor_expected_prev;
reg  pwm_motor_expected_prev;
reg  pwm_puerta_expected_prev;

reg  last_in1_motor_exp;
reg  last_in2_motor_exp;
reg  last_pwm_motor_exp;
reg  last_pwm_puerta_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:4] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 4'b1;
end

// update real /o prevs

always @(trigger)
begin
	in1_motor_prev = in1_motor;
	in2_motor_prev = in2_motor;
	pwm_motor_prev = pwm_motor;
	pwm_puerta_prev = pwm_puerta;
end

// update expected /o prevs

always @(trigger)
begin
	in1_motor_expected_prev = in1_motor_expected;
	in2_motor_expected_prev = in2_motor_expected;
	pwm_motor_expected_prev = pwm_motor_expected;
	pwm_puerta_expected_prev = pwm_puerta_expected;
end



// expected in1_motor
initial
begin
	in1_motor_expected = 1'bX;
end 

// expected in2_motor
initial
begin
	in2_motor_expected = 1'bX;
end 

// expected pwm_motor
initial
begin
	pwm_motor_expected = 1'bX;
end 

// expected pwm_puerta
initial
begin
	pwm_puerta_expected = 1'bX;
end 
// generate trigger
always @(in1_motor_expected or in1_motor or in2_motor_expected or in2_motor or pwm_motor_expected or pwm_motor or pwm_puerta_expected or pwm_puerta)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected in1_motor = %b | expected in2_motor = %b | expected pwm_motor = %b | expected pwm_puerta = %b | ",in1_motor_expected_prev,in2_motor_expected_prev,pwm_motor_expected_prev,pwm_puerta_expected_prev);
	$display("| real in1_motor = %b | real in2_motor = %b | real pwm_motor = %b | real pwm_puerta = %b | ",in1_motor_prev,in2_motor_prev,pwm_motor_prev,pwm_puerta_prev);
`endif
	if (
		( in1_motor_expected_prev !== 1'bx ) && ( in1_motor_prev !== in1_motor_expected_prev )
		&& ((in1_motor_expected_prev !== last_in1_motor_exp) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port in1_motor :: @time = %t",  $realtime);
		$display ("     Expected value = %b", in1_motor_expected_prev);
		$display ("     Real value = %b", in1_motor_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_in1_motor_exp = in1_motor_expected_prev;
	end
	if (
		( in2_motor_expected_prev !== 1'bx ) && ( in2_motor_prev !== in2_motor_expected_prev )
		&& ((in2_motor_expected_prev !== last_in2_motor_exp) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port in2_motor :: @time = %t",  $realtime);
		$display ("     Expected value = %b", in2_motor_expected_prev);
		$display ("     Real value = %b", in2_motor_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_in2_motor_exp = in2_motor_expected_prev;
	end
	if (
		( pwm_motor_expected_prev !== 1'bx ) && ( pwm_motor_prev !== pwm_motor_expected_prev )
		&& ((pwm_motor_expected_prev !== last_pwm_motor_exp) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port pwm_motor :: @time = %t",  $realtime);
		$display ("     Expected value = %b", pwm_motor_expected_prev);
		$display ("     Real value = %b", pwm_motor_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_pwm_motor_exp = pwm_motor_expected_prev;
	end
	if (
		( pwm_puerta_expected_prev !== 1'bx ) && ( pwm_puerta_prev !== pwm_puerta_expected_prev )
		&& ((pwm_puerta_expected_prev !== last_pwm_puerta_exp) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port pwm_puerta :: @time = %t",  $realtime);
		$display ("     Expected value = %b", pwm_puerta_expected_prev);
		$display ("     Real value = %b", pwm_puerta_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_pwm_puerta_exp = pwm_puerta_expected_prev;
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#1000000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$finish;
end 
endmodule

module motores_vlg_vec_tst();
// constants                                           
// general purpose registers
reg clk;
reg mover;
reg [4:0] piso_actual;
reg [4:0] piso_destino;
reg puerta_cmd;
reg reset;
// wires                                               
wire in1_motor;
wire in2_motor;
wire pwm_motor;
wire pwm_puerta;

wire sampler;                             

// assign statements (if any)                          
motores i1 (
// port map - connection between master ports and signals/registers   
	.clk(clk),
	.in1_motor(in1_motor),
	.in2_motor(in2_motor),
	.mover(mover),
	.piso_actual(piso_actual),
	.piso_destino(piso_destino),
	.puerta_cmd(puerta_cmd),
	.pwm_motor(pwm_motor),
	.pwm_puerta(pwm_puerta),
	.reset(reset)
);

// clk
initial
begin
	repeat(33)
	begin
		clk = 1'b0;
		clk = #15000 1'b1;
		# 15000;
	end
	clk = 1'b0;
end 

// mover
initial
begin
	mover = 1'b0;
	mover = #10000 1'b1;
end 
// piso_actual[ 4 ]
initial
begin
	piso_actual[4] = 1'b0;
	piso_actual[4] = #800000 1'b1;
end 
// piso_actual[ 3 ]
initial
begin
	piso_actual[3] = 1'b0;
	piso_actual[3] = #400000 1'b1;
	piso_actual[3] = #400000 1'b0;
end 
// piso_actual[ 2 ]
initial
begin
	repeat(2)
	begin
		piso_actual[2] = 1'b0;
		piso_actual[2] = #200000 1'b1;
		# 200000;
	end
	piso_actual[2] = 1'b0;
end 
// piso_actual[ 1 ]
always
begin
	piso_actual[1] = 1'b0;
	piso_actual[1] = #100000 1'b1;
	#100000;
end 
// piso_actual[ 0 ]
always
begin
	piso_actual[0] = 1'b0;
	piso_actual[0] = #50000 1'b1;
	#50000;
end 
// piso_destino[ 4 ]
initial
begin
	piso_destino[4] = 1'b0;
	piso_destino[4] = #700000 1'b1;
end 
// piso_destino[ 3 ]
initial
begin
	piso_destino[3] = 1'b0;
	piso_destino[3] = #300000 1'b1;
	piso_destino[3] = #400000 1'b0;
end 
// piso_destino[ 2 ]
initial
begin
	piso_destino[2] = 1'b0;
	# 100000;
	repeat(2)
	begin
		piso_destino[2] = 1'b1;
		piso_destino[2] = #200000 1'b0;
		# 200000;
	end
	piso_destino[2] = 1'b1;
end 
// piso_destino[ 1 ]
always
begin
	piso_destino[1] = 1'b1;
	piso_destino[1] = #100000 1'b0;
	#100000;
end 
// piso_destino[ 0 ]
always
begin
	piso_destino[0] = 1'b0;
	piso_destino[0] = #50000 1'b1;
	#50000;
end 

// puerta_cmd
initial
begin
	puerta_cmd = 1'b0;
	puerta_cmd = #40000 1'b1;
	puerta_cmd = #270000 1'b0;
end 

// reset
initial
begin
	reset = 1'b0;
end 

motores_vlg_sample_tst tb_sample (
	.clk(clk),
	.mover(mover),
	.piso_actual(piso_actual),
	.piso_destino(piso_destino),
	.puerta_cmd(puerta_cmd),
	.reset(reset),
	.sampler_tx(sampler)
);

motores_vlg_check_tst tb_out(
	.in1_motor(in1_motor),
	.in2_motor(in2_motor),
	.pwm_motor(pwm_motor),
	.pwm_puerta(pwm_puerta),
	.sampler_rx(sampler)
);
endmodule

