// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "05/08/2025 16:00:07"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    puerta
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module puerta_vlg_sample_tst(
	abrir,
	cerrar,
	clk,
	enable,
	fallo_energia,
	rst,
	sampler_tx
);
input  abrir;
input  cerrar;
input  clk;
input  enable;
input  fallo_energia;
input  rst;
output sampler_tx;

reg sample;
time current_time;
always @(abrir or cerrar or clk or enable or fallo_energia or rst)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
	if ($realtime == 0 || $realtime != current_time)  
	begin									          
		if (sample === 1'bx)                          
			sample = 0;                               
		else                                          
			sample = ~sample;                         
	end										          
	current_time = $realtime;					      
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module puerta_vlg_check_tst (
	alarma_sonora,
	alarma_visual,
	puerta_abierta,
	puerta_cerrada,
	sampler_rx
);
input  alarma_sonora;
input  alarma_visual;
input  puerta_abierta;
input  puerta_cerrada;
input sampler_rx;

reg  alarma_sonora_expected;
reg  alarma_visual_expected;
reg  puerta_abierta_expected;
reg  puerta_cerrada_expected;

reg  alarma_sonora_prev;
reg  alarma_visual_prev;
reg  puerta_abierta_prev;
reg  puerta_cerrada_prev;

reg  alarma_sonora_expected_prev;
reg  alarma_visual_expected_prev;
reg  puerta_abierta_expected_prev;
reg  puerta_cerrada_expected_prev;

reg  last_alarma_sonora_exp;
reg  last_alarma_visual_exp;
reg  last_puerta_abierta_exp;
reg  last_puerta_cerrada_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:4] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 4'b1;
end

// update real /o prevs

always @(trigger)
begin
	alarma_sonora_prev = alarma_sonora;
	alarma_visual_prev = alarma_visual;
	puerta_abierta_prev = puerta_abierta;
	puerta_cerrada_prev = puerta_cerrada;
end

// update expected /o prevs

always @(trigger)
begin
	alarma_sonora_expected_prev = alarma_sonora_expected;
	alarma_visual_expected_prev = alarma_visual_expected;
	puerta_abierta_expected_prev = puerta_abierta_expected;
	puerta_cerrada_expected_prev = puerta_cerrada_expected;
end



// expected alarma_sonora
initial
begin
	alarma_sonora_expected = 1'bX;
end 

// expected alarma_visual
initial
begin
	alarma_visual_expected = 1'bX;
end 

// expected puerta_abierta
initial
begin
	puerta_abierta_expected = 1'bX;
end 

// expected puerta_cerrada
initial
begin
	puerta_cerrada_expected = 1'bX;
end 
// generate trigger
always @(alarma_sonora_expected or alarma_sonora or alarma_visual_expected or alarma_visual or puerta_abierta_expected or puerta_abierta or puerta_cerrada_expected or puerta_cerrada)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected alarma_sonora = %b | expected alarma_visual = %b | expected puerta_abierta = %b | expected puerta_cerrada = %b | ",alarma_sonora_expected_prev,alarma_visual_expected_prev,puerta_abierta_expected_prev,puerta_cerrada_expected_prev);
	$display("| real alarma_sonora = %b | real alarma_visual = %b | real puerta_abierta = %b | real puerta_cerrada = %b | ",alarma_sonora_prev,alarma_visual_prev,puerta_abierta_prev,puerta_cerrada_prev);
`endif
	if (
		( alarma_sonora_expected_prev !== 1'bx ) && ( alarma_sonora_prev !== alarma_sonora_expected_prev )
		&& ((alarma_sonora_expected_prev !== last_alarma_sonora_exp) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port alarma_sonora :: @time = %t",  $realtime);
		$display ("     Expected value = %b", alarma_sonora_expected_prev);
		$display ("     Real value = %b", alarma_sonora_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_alarma_sonora_exp = alarma_sonora_expected_prev;
	end
	if (
		( alarma_visual_expected_prev !== 1'bx ) && ( alarma_visual_prev !== alarma_visual_expected_prev )
		&& ((alarma_visual_expected_prev !== last_alarma_visual_exp) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port alarma_visual :: @time = %t",  $realtime);
		$display ("     Expected value = %b", alarma_visual_expected_prev);
		$display ("     Real value = %b", alarma_visual_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_alarma_visual_exp = alarma_visual_expected_prev;
	end
	if (
		( puerta_abierta_expected_prev !== 1'bx ) && ( puerta_abierta_prev !== puerta_abierta_expected_prev )
		&& ((puerta_abierta_expected_prev !== last_puerta_abierta_exp) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port puerta_abierta :: @time = %t",  $realtime);
		$display ("     Expected value = %b", puerta_abierta_expected_prev);
		$display ("     Real value = %b", puerta_abierta_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_puerta_abierta_exp = puerta_abierta_expected_prev;
	end
	if (
		( puerta_cerrada_expected_prev !== 1'bx ) && ( puerta_cerrada_prev !== puerta_cerrada_expected_prev )
		&& ((puerta_cerrada_expected_prev !== last_puerta_cerrada_exp) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port puerta_cerrada :: @time = %t",  $realtime);
		$display ("     Expected value = %b", puerta_cerrada_expected_prev);
		$display ("     Real value = %b", puerta_cerrada_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_puerta_cerrada_exp = puerta_cerrada_expected_prev;
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#1000000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$finish;
end 
endmodule

module puerta_vlg_vec_tst();
// constants                                           
// general purpose registers
reg abrir;
reg cerrar;
reg clk;
reg enable;
reg fallo_energia;
reg rst;
// wires                                               
wire alarma_sonora;
wire alarma_visual;
wire puerta_abierta;
wire puerta_cerrada;

wire sampler;                             

// assign statements (if any)                          
puerta i1 (
// port map - connection between master ports and signals/registers   
	.abrir(abrir),
	.alarma_sonora(alarma_sonora),
	.alarma_visual(alarma_visual),
	.cerrar(cerrar),
	.clk(clk),
	.enable(enable),
	.fallo_energia(fallo_energia),
	.puerta_abierta(puerta_abierta),
	.puerta_cerrada(puerta_cerrada),
	.rst(rst)
);

// abrir
initial
begin
	abrir = 1'b0;
	abrir = #80000 1'b1;
	abrir = #90000 1'b0;
end 

// cerrar
initial
begin
	cerrar = 1'b0;
	cerrar = #250000 1'b1;
	cerrar = #130000 1'b0;
end 

// clk
initial
begin
	repeat(33)
	begin
		clk = 1'b0;
		clk = #15000 1'b1;
		# 15000;
	end
	clk = 1'b0;
end 

// enable
initial
begin
	enable = 1'b0;
	enable = #20000 1'b1;
	enable = #420000 1'b0;
end 

// fallo_energia
initial
begin
	fallo_energia = 1'b0;
	fallo_energia = #350000 1'b1;
	fallo_energia = #130000 1'b0;
end 

// rst
initial
begin
	rst = 1'b0;
	rst = #190000 1'b1;
	rst = #90000 1'b0;
end 

puerta_vlg_sample_tst tb_sample (
	.abrir(abrir),
	.cerrar(cerrar),
	.clk(clk),
	.enable(enable),
	.fallo_energia(fallo_energia),
	.rst(rst),
	.sampler_tx(sampler)
);

puerta_vlg_check_tst tb_out(
	.alarma_sonora(alarma_sonora),
	.alarma_visual(alarma_visual),
	.puerta_abierta(puerta_abierta),
	.puerta_cerrada(puerta_cerrada),
	.sampler_rx(sampler)
);
endmodule

