// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "03/27/2025 22:56:37"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    ascensor
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module ascensor_vlg_sample_tst(
	clk,
	falla_energia,
	llamada_piso,
	personas,
	reset,
	seleccion_piso,
	sampler_tx
);
input  clk;
input  falla_energia;
input [4:0] llamada_piso;
input [3:0] personas;
input  reset;
input [4:0] seleccion_piso;
output sampler_tx;

reg sample;
time current_time;
always @(clk or falla_energia or llamada_piso or personas or reset or seleccion_piso)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
	if ($realtime == 0 || $realtime != current_time)  
	begin									          
		if (sample === 1'bx)                          
			sample = 0;                               
		else                                          
			sample = ~sample;                         
	end										          
	current_time = $realtime;					      
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module ascensor_vlg_check_tst (
	alarma_sonora,
	destino_piso,
	luz_puerta,
	piso_actual,
	sampler_rx
);
input  alarma_sonora;
input [2:0] destino_piso;
input  luz_puerta;
input [2:0] piso_actual;
input sampler_rx;

reg  alarma_sonora_expected;
reg [2:0] destino_piso_expected;
reg  luz_puerta_expected;
reg [2:0] piso_actual_expected;

reg  alarma_sonora_prev;
reg [2:0] destino_piso_prev;
reg  luz_puerta_prev;
reg [2:0] piso_actual_prev;

reg  alarma_sonora_expected_prev;
reg [2:0] destino_piso_expected_prev;
reg  luz_puerta_expected_prev;
reg [2:0] piso_actual_expected_prev;

reg  last_alarma_sonora_exp;
reg [2:0] last_destino_piso_exp;
reg  last_luz_puerta_exp;
reg [2:0] last_piso_actual_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:4] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 4'b1;
end

// update real /o prevs

always @(trigger)
begin
	alarma_sonora_prev = alarma_sonora;
	destino_piso_prev = destino_piso;
	luz_puerta_prev = luz_puerta;
	piso_actual_prev = piso_actual;
end

// update expected /o prevs

always @(trigger)
begin
	alarma_sonora_expected_prev = alarma_sonora_expected;
	destino_piso_expected_prev = destino_piso_expected;
	luz_puerta_expected_prev = luz_puerta_expected;
	piso_actual_expected_prev = piso_actual_expected;
end



// expected alarma_sonora
initial
begin
	alarma_sonora_expected = 1'bX;
end 
// expected destino_piso[ 2 ]
initial
begin
	destino_piso_expected[2] = 1'bX;
end 
// expected destino_piso[ 1 ]
initial
begin
	destino_piso_expected[1] = 1'bX;
end 
// expected destino_piso[ 0 ]
initial
begin
	destino_piso_expected[0] = 1'bX;
end 

// expected luz_puerta
initial
begin
	luz_puerta_expected = 1'bX;
end 
// expected piso_actual[ 2 ]
initial
begin
	piso_actual_expected[2] = 1'bX;
end 
// expected piso_actual[ 1 ]
initial
begin
	piso_actual_expected[1] = 1'bX;
end 
// expected piso_actual[ 0 ]
initial
begin
	piso_actual_expected[0] = 1'bX;
end 
// generate trigger
always @(alarma_sonora_expected or alarma_sonora or destino_piso_expected or destino_piso or luz_puerta_expected or luz_puerta or piso_actual_expected or piso_actual)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected alarma_sonora = %b | expected destino_piso = %b | expected luz_puerta = %b | expected piso_actual = %b | ",alarma_sonora_expected_prev,destino_piso_expected_prev,luz_puerta_expected_prev,piso_actual_expected_prev);
	$display("| real alarma_sonora = %b | real destino_piso = %b | real luz_puerta = %b | real piso_actual = %b | ",alarma_sonora_prev,destino_piso_prev,luz_puerta_prev,piso_actual_prev);
`endif
	if (
		( alarma_sonora_expected_prev !== 1'bx ) && ( alarma_sonora_prev !== alarma_sonora_expected_prev )
		&& ((alarma_sonora_expected_prev !== last_alarma_sonora_exp) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port alarma_sonora :: @time = %t",  $realtime);
		$display ("     Expected value = %b", alarma_sonora_expected_prev);
		$display ("     Real value = %b", alarma_sonora_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_alarma_sonora_exp = alarma_sonora_expected_prev;
	end
	if (
		( destino_piso_expected_prev[0] !== 1'bx ) && ( destino_piso_prev[0] !== destino_piso_expected_prev[0] )
		&& ((destino_piso_expected_prev[0] !== last_destino_piso_exp[0]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port destino_piso[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", destino_piso_expected_prev);
		$display ("     Real value = %b", destino_piso_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_destino_piso_exp[0] = destino_piso_expected_prev[0];
	end
	if (
		( destino_piso_expected_prev[1] !== 1'bx ) && ( destino_piso_prev[1] !== destino_piso_expected_prev[1] )
		&& ((destino_piso_expected_prev[1] !== last_destino_piso_exp[1]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port destino_piso[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", destino_piso_expected_prev);
		$display ("     Real value = %b", destino_piso_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_destino_piso_exp[1] = destino_piso_expected_prev[1];
	end
	if (
		( destino_piso_expected_prev[2] !== 1'bx ) && ( destino_piso_prev[2] !== destino_piso_expected_prev[2] )
		&& ((destino_piso_expected_prev[2] !== last_destino_piso_exp[2]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port destino_piso[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", destino_piso_expected_prev);
		$display ("     Real value = %b", destino_piso_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_destino_piso_exp[2] = destino_piso_expected_prev[2];
	end
	if (
		( luz_puerta_expected_prev !== 1'bx ) && ( luz_puerta_prev !== luz_puerta_expected_prev )
		&& ((luz_puerta_expected_prev !== last_luz_puerta_exp) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port luz_puerta :: @time = %t",  $realtime);
		$display ("     Expected value = %b", luz_puerta_expected_prev);
		$display ("     Real value = %b", luz_puerta_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_luz_puerta_exp = luz_puerta_expected_prev;
	end
	if (
		( piso_actual_expected_prev[0] !== 1'bx ) && ( piso_actual_prev[0] !== piso_actual_expected_prev[0] )
		&& ((piso_actual_expected_prev[0] !== last_piso_actual_exp[0]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port piso_actual[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", piso_actual_expected_prev);
		$display ("     Real value = %b", piso_actual_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_piso_actual_exp[0] = piso_actual_expected_prev[0];
	end
	if (
		( piso_actual_expected_prev[1] !== 1'bx ) && ( piso_actual_prev[1] !== piso_actual_expected_prev[1] )
		&& ((piso_actual_expected_prev[1] !== last_piso_actual_exp[1]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port piso_actual[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", piso_actual_expected_prev);
		$display ("     Real value = %b", piso_actual_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_piso_actual_exp[1] = piso_actual_expected_prev[1];
	end
	if (
		( piso_actual_expected_prev[2] !== 1'bx ) && ( piso_actual_prev[2] !== piso_actual_expected_prev[2] )
		&& ((piso_actual_expected_prev[2] !== last_piso_actual_exp[2]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port piso_actual[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", piso_actual_expected_prev);
		$display ("     Real value = %b", piso_actual_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_piso_actual_exp[2] = piso_actual_expected_prev[2];
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#1000000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$finish;
end 
endmodule

module ascensor_vlg_vec_tst();
// constants                                           
// general purpose registers
reg clk;
reg falla_energia;
reg [4:0] llamada_piso;
reg [3:0] personas;
reg reset;
reg [4:0] seleccion_piso;
// wires                                               
wire alarma_sonora;
wire [2:0] destino_piso;
wire luz_puerta;
wire [2:0] piso_actual;

wire sampler;                             

// assign statements (if any)                          
ascensor i1 (
// port map - connection between master ports and signals/registers   
	.alarma_sonora(alarma_sonora),
	.clk(clk),
	.destino_piso(destino_piso),
	.falla_energia(falla_energia),
	.llamada_piso(llamada_piso),
	.luz_puerta(luz_puerta),
	.personas(personas),
	.piso_actual(piso_actual),
	.reset(reset),
	.seleccion_piso(seleccion_piso)
);

// clk
initial
begin
	repeat(33)
	begin
		clk = 1'b0;
		clk = #15000 1'b1;
		# 15000;
	end
	clk = 1'b0;
end 

// falla_energia
initial
begin
	falla_energia = 1'b0;
	falla_energia = #120000 1'b1;
	falla_energia = #110000 1'b0;
end 
// llamada_piso[ 4 ]
initial
begin
	llamada_piso[4] = 1'b0;
end 
// llamada_piso[ 3 ]
initial
begin
	llamada_piso[3] = 1'b0;
end 
// llamada_piso[ 2 ]
initial
begin
	llamada_piso[2] = 1'b0;
	llamada_piso[2] = #680000 1'b1;
end 
// llamada_piso[ 1 ]
initial
begin
	llamada_piso[1] = 1'b0;
	llamada_piso[1] = #340000 1'b1;
	llamada_piso[1] = #340000 1'b0;
end 
// llamada_piso[ 0 ]
initial
begin
	repeat(2)
	begin
		llamada_piso[0] = 1'b0;
		llamada_piso[0] = #170000 1'b1;
		# 170000;
	end
	llamada_piso[0] = 1'b0;
	llamada_piso[0] = #170000 1'b1;
end 
// personas[ 3 ]
initial
begin
	repeat(2)
	begin
		personas[3] = 1'b0;
		personas[3] = #240000 1'b1;
		# 240000;
	end
	personas[3] = 1'b0;
end 
// personas[ 2 ]
initial
begin
	repeat(4)
	begin
		personas[2] = 1'b0;
		personas[2] = #120000 1'b1;
		# 120000;
	end
	personas[2] = 1'b0;
end 
// personas[ 1 ]
initial
begin
	repeat(8)
	begin
		personas[1] = 1'b0;
		personas[1] = #60000 1'b1;
		# 60000;
	end
	personas[1] = 1'b0;
end 
// personas[ 0 ]
initial
begin
	repeat(16)
	begin
		personas[0] = 1'b0;
		personas[0] = #30000 1'b1;
		# 30000;
	end
	personas[0] = 1'b0;
	personas[0] = #30000 1'b1;
end 

// reset
initial
begin
	reset = 1'b0;
	reset = #190000 1'b1;
	reset = #120000 1'b0;
	reset = #230000 1'b1;
	reset = #70000 1'b0;
end 
// seleccion_piso[ 4 ]
initial
begin
	seleccion_piso[4] = 1'b0;
end 
// seleccion_piso[ 3 ]
initial
begin
	seleccion_piso[3] = 1'b0;
end 
// seleccion_piso[ 2 ]
initial
begin
	seleccion_piso[2] = 1'b0;
	seleccion_piso[2] = #680000 1'b1;
end 
// seleccion_piso[ 1 ]
initial
begin
	seleccion_piso[1] = 1'b0;
	seleccion_piso[1] = #340000 1'b1;
	seleccion_piso[1] = #340000 1'b0;
end 
// seleccion_piso[ 0 ]
initial
begin
	repeat(2)
	begin
		seleccion_piso[0] = 1'b0;
		seleccion_piso[0] = #170000 1'b1;
		# 170000;
	end
	seleccion_piso[0] = 1'b0;
	seleccion_piso[0] = #170000 1'b1;
end 

ascensor_vlg_sample_tst tb_sample (
	.clk(clk),
	.falla_energia(falla_energia),
	.llamada_piso(llamada_piso),
	.personas(personas),
	.reset(reset),
	.seleccion_piso(seleccion_piso),
	.sampler_tx(sampler)
);

ascensor_vlg_check_tst tb_out(
	.alarma_sonora(alarma_sonora),
	.destino_piso(destino_piso),
	.luz_puerta(luz_puerta),
	.piso_actual(piso_actual),
	.sampler_rx(sampler)
);
endmodule

