library IEEE;
use IEEE.STD_LOGIC_1164.ALL;
use IEEE.STD_LOGIC_ARITH.ALL;
use IEEE.STD_LOGIC_UNSIGNED.ALL;

entity controlpuertas is
    Port (
        clk              : in STD_LOGIC;
        reset            : in STD_LOGIC;
        abrir_puerta     : in STD_LOGIC; -- Botón manual de abrir
        cerrar_puerta    : in STD_LOGIC; -- Botón manual de cerrar
        en_movimiento    : in STD_LOGIC; -- Ascensor en movimiento
        puertas_estado   : out STD_LOGIC_VECTOR(1 downto 0) -- 00: Cerrada, 01: Abriendo, 10: Abierta, 11: Cerrando
    );
end controlpuertas;

architecture Behavioral of controlpuertas is
    type ESTADO_PUERTAS is (CERRADA, ABRIENDO, ABIERTA, CERRANDO);
    signal estado_actual, estado_siguiente : ESTADO_PUERTAS := CERRADA;
    signal contador_tiempo : INTEGER := 0;

begin

    process(clk, reset)
    begin
        if reset = '1' then
            estado_actual <= CERRADA;
            puertas_estado <= "00";
            contador_tiempo <= 0;
        elsif rising_edge(clk) then
            estado_actual <= estado_siguiente;

            case estado_actual is
                when CERRADA =>
                    puertas_estado <= "00";
                    if abrir_puerta = '1' and en_movimiento = '0' then
                        estado_siguiente <= ABRIENDO;
                        contador_tiempo <= 0;
                    end if;

                when ABRIENDO =>
                    puertas_estado <= "01";
                    contador_tiempo <= contador_tiempo + 1;
                    if contador_tiempo = 10 then -- Espera 10 ciclos antes de abrir
                        estado_siguiente <= ABIERTA;
                        contador_tiempo <= 0;
                    end if;

                when ABIERTA =>
                    puertas_estado <= "10";
                    contador_tiempo <= contador_tiempo + 1;
                    if cerrar_puerta = '1' or contador_tiempo = 45 then -- Cierre manual o automático a 45 ciclos
                        estado_siguiente <= CERRANDO;
                        contador_tiempo <= 0;
                    end if;

                when CERRANDO =>
                    puertas_estado <= "11";
                    contador_tiempo <= contador_tiempo + 1;
                    if contador_tiempo = 10 then -- Espera 10 ciclos antes de cerrar
                        estado_siguiente <= CERRADA;
                        contador_tiempo <= 0;
                    end if;
            end case;
        end if;
    end process;

end Behavioral;
